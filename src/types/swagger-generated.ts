/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/users/verify/email-send": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 이메일 인증코드 발송 api
         * @description 회원가입 중 이메일 인증 코드를 발송
         */
        post: operations["sendVerificationCode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/verify/email-check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 이메일 인증코드 인증 api
         * @description 이메일 인증코드(6자리) 입력 시 인증 가능하고 나머지 회원가입 진행
         */
        post: operations["confirmVerificationCode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/verify/check-nickname": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 닉네임 중복 체크 api */
        post: operations["checkNickname"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 회원가입 api */
        post: operations["signup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 로그아웃 api */
        post: operations["logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 로그인 api */
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/test/s3/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * S3 파일 업로드
         * @description profile-images 폴더에 파일 업로드 후 URL 반환
         */
        post: operations["upload"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reviews/{lessonId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 리뷰 작성
         * @description 레슨 ID에 해당되는 리뷰를 작성합니다.
         */
        post: operations["createReview"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payments/verifyAmount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 결제 검증 데이터 확인
         * @description 결제 무결성 검증을 위한 데이터 확인
         */
        post: operations["verifyAmount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payments/saveAmount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 결제 검증 데이터 저장
         * @description 결제 무결성 검증을 위한 데이터 저장
         */
        post: operations["saveAmount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payments/prepare": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 결제 준비
         * @description 실제 결제 전 최종 가격 적용 후 결제 준비
         */
        post: operations["preparePayment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payments/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 결제 진행
         * @description 결제 진행
         */
        post: operations["confirm"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payments/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 결제 취소
         * @description 결제 취소
         */
        post: operations["cancel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/location/upload-location": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 법정동명 csv파일 업로드 api
         * @description 현재 쓰이는 열만 필터링하여 업로드
         */
        post: operations["uploadCsv"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lessons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 레슨 검색 api
         * @description category(선택(null 가능)) / search(선택) / 정렬 선택 필수 / 법정동 선택 필수(리(ri) 단위 제외)
         */
        get: operations["searchLessons"];
        put?: never;
        /**
         * 레슨 생성 api
         * @description 레슨생성
         */
        post: operations["createLesson"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lessons/{lessonId}/application": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 레슨 신청
         * @description 레슨 ID에 해당되는 레슨을 신청합니다.
         */
        post: operations["createLessonApplication"];
        /**
         * 레슨 신청 취소
         * @description 레슨 ID에 해당되는 레슨 신청을 취소합니다.
         */
        delete: operations["deleteLessonApplication"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lessons/applications/{lessonApplicationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 레슨 신청 승인/거절 api */
        post: operations["processLessonApplication"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/coupons/{couponId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 쿠폰 발급 API
         * @description couponId에 맞는 쿠폰을 유저에게 발급하는 API입니다.
         */
        post: operations["createUserCoupon"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/comments/{lessonId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 댓글 조회
         * @description 레슨 ID에 해당되는 댓글들을 조회합니다.
         */
        get: operations["readAll"];
        put?: never;
        /**
         * 댓글 작성
         * @description 레슨 ID에 해당되는 댓글을 작성합니다.
         */
        post: operations["createComment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/coupons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 쿠폰 목록 조회
         * @description 관리자가 쿠폰 목록을 조회
         */
        get: operations["getCoupons"];
        put?: never;
        /**
         * 쿠폰 생성
         * @description 관리자가 새로운 쿠폰을 생성
         */
        post: operations["createCoupon"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** 비밀번호 변경 api */
        patch: operations["updatePassword"];
        trace?: never;
    };
    "/api/v1/profiles/intro": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** 유저 프로필 자기소개 수정 api */
        patch: operations["updateProfileIntro"];
        trace?: never;
    };
    "/api/v1/profiles/image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** 유저 프로필 이미지 수정 api */
        patch: operations["updateProfileImage"];
        trace?: never;
    };
    "/api/v1/lessons/{lessonId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 레슨 상세조회
         * @description 레슨 ID로 상세 정보를 조회합니다.
         */
        get: operations["getLessonDetail"];
        put?: never;
        post?: never;
        /**
         * 레슨 삭제 api
         * @description 현재는 무료 레슨만 있기때문에 참가자가 있어도 마음대로 삭제가능
         */
        delete: operations["deleteLesson"];
        options?: never;
        head?: never;
        /**
         * 레슨 수정 api
         * @description 레슨 정보를 수정
         */
        patch: operations["updateLesson"];
        trace?: never;
    };
    "/api/v1/admin/coupons/{couponId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 쿠폰 상세 조회
         * @description 관리자가 특정 쿠폰의 상세 정보를 조회
         */
        get: operations["getCouponDetail"];
        put?: never;
        post?: never;
        /**
         * 쿠폰 삭제
         * @description 관리자가 쿠폰을 삭제
         */
        delete: operations["deleteCoupon"];
        options?: never;
        head?: never;
        /**
         * 쿠폰 수정
         * @description 관리자가 쿠폰 정보를 수정
         */
        patch: operations["updateCoupon"];
        trace?: never;
    };
    "/api/v1/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 현재 로그인한 사용자 정보 조회 api */
        get: operations["getCurrentUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reviews/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 리뷰 조회
         * @description 유저 ID에 해당되는 리뷰들을 조회합니다.
         */
        get: operations["readAll_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rankings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 전체 랭킹 조회 api
         * @description 카테고리와 관계없이 전체 랭킹 Top10을 조회
         */
        get: operations["getRankings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rankings/{category}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 특정 카테고리 랭킹 조회 api
         * @description 지정된 카테고리의 랭킹을 조회
         */
        get: operations["getRankingsByCategory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/profiles/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 유저 프로필 상세 조회 api */
        get: operations["getProfileDetail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/profiles/{userId}/created-lessons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 프로필유저의 개설한 레슨 목록 조회 api
         * @description 특정 유저가 개설한 레슨 목록을 조회 -> 누구나 조회가능
         */
        get: operations["getUserCreatedLessons"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payments/view/success": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 완료 결제 조회
         * @description 완료된 결제 내역 조회
         */
        get: operations["readAll_2"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payments/view/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 취소 결제 조회
         * @description 취소된 결제 내역 조회
         */
        get: operations["readAllFailure"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/location/exists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 법정동명 검증 api */
        get: operations["checkExists"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lessons/{userId}/created-lessons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 강사가 개설한 레슨 목록 조회 api */
        get: operations["getCreatedLessons"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lessons/{lessonId}/participants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 레슨 참가자 목록 조회 api */
        get: operations["getLessonParticipants"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lessons/{lessonId}/applications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 레슨 신청자 목록 조회 api
         * @description 레슨 신청자의 목록을 조회 가능함.
         */
        get: operations["getLessonApplications"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lessons/summary/{lessonId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 레슨 간단 조회
         * @description 레슨 ID로 간단 정보를 조회합니다.
         */
        get: operations["getLessonSimple"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lessons/my-applications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 나의 레슨 신청 목록 조회
         * @description 현재 로그인한 사용자의 레슨 신청 목록을 조회합니다.
         */
        get: operations["getMyLessonApplications"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/coupons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 발급 가능 쿠폰 목록 조회 API
         * @description 발급 가능한 쿠폰 목록을 조회하는 API입니다.
         */
        get: operations["getCoupons_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/coupons/my-coupons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 내 쿠폰 목록 조회 API
         * @description 내가 보유한 쿠폰 목록을 조회하는 API입니다.
         */
        get: operations["getUserCoupons"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/withdraw": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** 회원탈퇴 api */
        delete: operations["withdraw"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/comments/{commentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 댓글 삭제
         * @description 댓글 ID에 해당되는 댓글을 삭제합니다.
         */
        delete: operations["deleteComment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        EmailSendRequestDto: {
            email: string;
        };
        BaseResponseEmailSendResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["EmailSendResponseDto"];
        };
        EmailSendResponseDto: {
            email?: string;
            /** Format: int32 */
            expirationMinutes?: number;
        };
        EmailVerificationDto: {
            email: string;
            verificationCode: string;
        };
        BaseResponseVoid: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: unknown;
        };
        NicknameCheckRequestDto: {
            nickname: string;
        };
        SignupRequestDto: {
            email: string;
            password: string;
            nickname: string;
        };
        BaseResponseSignupResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["SignupResponseDto"];
        };
        SignupResponseDto: {
            /** Format: int64 */
            id?: number;
            email?: string;
            nickname?: string;
            /** @enum {string} */
            userRole?: "USER" | "ADMIN";
            /** Format: date-time */
            createAt?: string;
        };
        LoginRequestDto: {
            email: string;
            password: string;
        };
        BaseResponseLoginResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["LoginResponseDto"];
        };
        LoginResponseDto: {
            /** Format: int64 */
            id?: number;
            email?: string;
            nickname?: string;
        };
        ReviewCreateRequestDto: {
            content?: string;
            /** Format: double */
            rating: number;
            reviewImage?: string;
        };
        BaseResponseReviewCreateResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["ReviewCreateResponseDto"];
        };
        ReviewCreateResponseDto: {
            /** Format: int64 */
            reviewId?: number;
            content?: string;
            /** Format: double */
            rating?: number;
            reviewImage?: string;
        };
        SaveAmountRequestDto: {
            orderId?: string;
            /** Format: int32 */
            amount?: number;
        };
        PaymentRequestDto: {
            /** Format: int64 */
            lessonId: number;
            /** Format: int64 */
            userCouponId?: number;
        };
        BaseResponsePaymentResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["PaymentResponseDto"];
        };
        PaymentResponseDto: {
            orderId?: string;
            lessonTitle?: string;
            /** Format: int32 */
            originPrice?: number;
            /** Format: int32 */
            payPrice?: number;
            /** @enum {string} */
            paymentMethod?: "CREDIT_CARD" | "BANK_TRANSFER" | "TOSS_PAYMENT";
            /** Format: date-time */
            expiredAt?: string;
        };
        ConfirmPaymentRequestDto: {
            /** Format: int32 */
            amount?: number;
            orderId: string;
            paymentKey: string;
        };
        BaseResponseSuccessfulPaymentResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["SuccessfulPaymentResponseDto"];
        };
        SuccessfulPaymentResponseDto: {
            addressDetail?: string;
            /** Format: date-time */
            startAt?: string;
            /** Format: date-time */
            endAt?: string;
            /** Format: int32 */
            payPrice?: number;
            city?: string;
            district?: string;
            dong?: string;
            /** @enum {string} */
            paymentMethod?: "CREDIT_CARD" | "BANK_TRANSFER" | "TOSS_PAYMENT";
        };
        CancelPaymentRequestDto: {
            orderId: string;
            cancelReason: string;
        };
        BaseResponseCancelPaymentResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["CancelPaymentResponseDto"];
        };
        CancelPaymentResponseDto: {
            lessonName?: string;
            cancelReason?: string;
            /** Format: date-time */
            startAt?: string;
            /** Format: date-time */
            endAt?: string;
            /** Format: date-time */
            paymentCancelledAt?: string;
            /** Format: int32 */
            payPrice?: number;
            /** Format: int32 */
            refundableAmount?: number;
        };
        LessonCreateRequestDto: {
            lessonName: string;
            description: string;
            /** @enum {string} */
            category: "GYM" | "PILATES" | "YOGA" | "RUNNING" | "CYCLING" | "HIKING" | "CLIMBING" | "SWIMMING" | "TENNIS" | "BADMINTON" | "SQUASH" | "FOOTBALL" | "BASKETBALL" | "BASEBALL" | "GOLF" | "DANCE" | "MARTIAL_ARTS" | "CROSS_FIT" | "BOARD_SPORTS" | "ESPORTS" | "TABLE_TENNIS" | "VOLLEYBALL" | "BOXING" | "KICKBOXING" | "FENCING" | "ARCHERY" | "INLINE_SKATING" | "SKATING" | "SURFING" | "HORSE_RIDING" | "SKIING" | "SNOWBOARDING" | "TRIATHLON" | "SPORTS_WATCHING_PARTY" | "ETC";
            /** Format: int32 */
            price: number;
            /** Format: int32 */
            maxParticipants: number;
            /** Format: date-time */
            startAt: string;
            /** Format: date-time */
            endAt: string;
            /** Format: date-time */
            openTime?: string;
            openRun: boolean;
            city: string;
            district: string;
            dong: string;
            ri?: string;
            addressDetail: string;
            lessonImages?: string[];
        };
        BaseResponseLessonResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["LessonResponseDto"];
        };
        LessonResponseDto: {
            /** Format: int64 */
            id?: number;
            lessonName?: string;
            description?: string;
            /** Format: int64 */
            lessonLeader?: number;
            /** @enum {string} */
            category?: "GYM" | "PILATES" | "YOGA" | "RUNNING" | "CYCLING" | "HIKING" | "CLIMBING" | "SWIMMING" | "TENNIS" | "BADMINTON" | "SQUASH" | "FOOTBALL" | "BASKETBALL" | "BASEBALL" | "GOLF" | "DANCE" | "MARTIAL_ARTS" | "CROSS_FIT" | "BOARD_SPORTS" | "ESPORTS" | "TABLE_TENNIS" | "VOLLEYBALL" | "BOXING" | "KICKBOXING" | "FENCING" | "ARCHERY" | "INLINE_SKATING" | "SKATING" | "SURFING" | "HORSE_RIDING" | "SKIING" | "SNOWBOARDING" | "TRIATHLON" | "SPORTS_WATCHING_PARTY" | "ETC";
            /** Format: int32 */
            price?: number;
            /** Format: int32 */
            maxParticipants?: number;
            /** Format: date-time */
            startAt?: string;
            /** Format: date-time */
            endAt?: string;
            /** Format: date-time */
            openTime?: string;
            openRun?: boolean;
            city?: string;
            district?: string;
            dong?: string;
            ri?: string;
            addressDetail?: string;
            /** @enum {string} */
            status?: "RECRUITING" | "RECRUITMENT_COMPLETED" | "IN_PROGRESS" | "COMPLETED" | "CANCELLED";
            /** Format: date-time */
            createdAt?: string;
            lessonImages?: string[];
        };
        BaseResponseLessonApplicationResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["LessonApplicationResponseDto"];
        };
        LessonApplicationResponseDto: {
            /** Format: int64 */
            lessonId?: number;
            /** Format: int64 */
            userId?: number;
            /** @enum {string} */
            status?: "PENDING" | "APPROVED" | "DENIED";
            /** Format: date-time */
            appliedAt?: string;
        };
        ApplicationActionRequestDto: {
            /** @enum {string} */
            action: "APPROVED" | "DENIED";
        };
        ApplicationProcessResponseDto: {
            /** Format: int64 */
            lessonApplicationId?: number;
            /** Format: int64 */
            userId?: number;
            /** @enum {string} */
            status?: "PENDING" | "APPROVED" | "DENIED";
            /** Format: date-time */
            processedAt?: string;
        };
        BaseResponseApplicationProcessResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["ApplicationProcessResponseDto"];
        };
        BaseResponseCreateUserCouponResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["CreateUserCouponResponseDto"];
        };
        CreateUserCouponResponseDto: {
            /** Format: int64 */
            couponId?: number;
            /** Format: int64 */
            userId?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            expirationDate?: string;
            /** @enum {string} */
            status?: "ACTIVE" | "INACTIVE";
        };
        CommentCreateRequestDto: {
            content: string;
            /** Format: int64 */
            parentCommentId?: number;
        };
        BaseResponseCommentResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["CommentResponseDto"];
        };
        CommentResponseDto: {
            /** Format: int64 */
            commentId?: number;
            /** Format: int64 */
            userId?: number;
            nickname?: string;
            content?: string;
            /** Format: int64 */
            parentCommentId?: number;
            deleted?: boolean;
            /** Format: date-time */
            createdAt?: string;
        };
        CouponCreateRequestDto: {
            couponName: string;
            /** Format: date-time */
            expirationDate?: string;
            discountPrice: string;
            /** Format: int32 */
            minOrderPrice: number;
            /** @enum {string} */
            status: "ACTIVE" | "INACTIVE";
            /** Format: int32 */
            quantity?: number;
            /** @enum {string} */
            category: "OPEN_RUN" | "NORMAL";
            /** Format: date-time */
            couponOpenAt: string;
            /** Format: date-time */
            couponDeadlineAt: string;
        };
        BaseResponseCouponCreateResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["CouponCreateResponseDto"];
        };
        CouponCreateResponseDto: {
            /** Format: int64 */
            couponId?: number;
            couponName?: string;
            status?: string;
            /** Format: date-time */
            createdAt?: string;
        };
        PasswordUpdateDto: {
            currentPassword: string;
            newPassword: string;
            confirmPassword: string;
        };
        IntroUpdateRequestDto: {
            intro?: string;
        };
        BaseResponseIntroUpdateResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["IntroUpdateResponseDto"];
        };
        IntroUpdateResponseDto: {
            /** Format: int64 */
            userId?: number;
            nickname?: string;
            intro?: string;
        };
        ImageUpdateRequestDto: {
            profileImage?: string;
        };
        BaseResponseImageUpdateResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["ImageUpdateResponseDto"];
        };
        ImageUpdateResponseDto: {
            /** Format: int64 */
            userId?: number;
            nickname?: string;
            profileImage?: string;
        };
        LessonUpdateRequestDto: {
            lessonName?: string;
            description?: string;
            /** @enum {string} */
            category?: "GYM" | "PILATES" | "YOGA" | "RUNNING" | "CYCLING" | "HIKING" | "CLIMBING" | "SWIMMING" | "TENNIS" | "BADMINTON" | "SQUASH" | "FOOTBALL" | "BASKETBALL" | "BASEBALL" | "GOLF" | "DANCE" | "MARTIAL_ARTS" | "CROSS_FIT" | "BOARD_SPORTS" | "ESPORTS" | "TABLE_TENNIS" | "VOLLEYBALL" | "BOXING" | "KICKBOXING" | "FENCING" | "ARCHERY" | "INLINE_SKATING" | "SKATING" | "SURFING" | "HORSE_RIDING" | "SKIING" | "SNOWBOARDING" | "TRIATHLON" | "SPORTS_WATCHING_PARTY" | "ETC";
            /** Format: int32 */
            price?: number;
            /** Format: int32 */
            maxParticipants?: number;
            /** Format: date-time */
            startAt?: string;
            /** Format: date-time */
            endAt?: string;
            /** Format: date-time */
            openTime?: string;
            openRun?: boolean;
            city?: string;
            district?: string;
            dong?: string;
            ri?: string;
            addressDetail?: string;
            lessonImages?: string[];
        };
        BaseResponseLessonUpdateResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["LessonUpdateResponseDto"];
        };
        LessonUpdateResponseDto: {
            /** Format: int64 */
            id?: number;
            lessonName?: string;
            description?: string;
            /** Format: int64 */
            lessonLeader?: number;
            /** @enum {string} */
            category?: "GYM" | "PILATES" | "YOGA" | "RUNNING" | "CYCLING" | "HIKING" | "CLIMBING" | "SWIMMING" | "TENNIS" | "BADMINTON" | "SQUASH" | "FOOTBALL" | "BASKETBALL" | "BASEBALL" | "GOLF" | "DANCE" | "MARTIAL_ARTS" | "CROSS_FIT" | "BOARD_SPORTS" | "ESPORTS" | "TABLE_TENNIS" | "VOLLEYBALL" | "BOXING" | "KICKBOXING" | "FENCING" | "ARCHERY" | "INLINE_SKATING" | "SKATING" | "SURFING" | "HORSE_RIDING" | "SKIING" | "SNOWBOARDING" | "TRIATHLON" | "SPORTS_WATCHING_PARTY" | "ETC";
            /** Format: int32 */
            price?: number;
            /** Format: int32 */
            maxParticipants?: number;
            /** Format: date-time */
            startAt?: string;
            /** Format: date-time */
            endAt?: string;
            /** Format: date-time */
            openTime?: string;
            openRun?: boolean;
            city?: string;
            district?: string;
            dong?: string;
            ri?: string;
            addressDetail?: string;
            /** @enum {string} */
            status?: "RECRUITING" | "RECRUITMENT_COMPLETED" | "IN_PROGRESS" | "COMPLETED" | "CANCELLED";
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            lessonImages?: string[];
        };
        CouponUpdateRequestDto: {
            couponName?: string;
            /** @enum {string} */
            status?: "ACTIVE" | "INACTIVE";
            /** Format: int32 */
            quantity?: number;
            /** @enum {string} */
            category?: "OPEN_RUN" | "NORMAL";
            /** Format: date-time */
            couponOpenAt?: string;
            /** Format: date-time */
            couponDeadlineAt?: string;
        };
        BaseResponseCouponUpdateResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["CouponUpdateResponseDto"];
        };
        CouponUpdateResponseDto: {
            couponName?: string;
            /** @enum {string} */
            status?: "ACTIVE" | "INACTIVE";
            /** Format: int32 */
            quantity?: number;
            /** @enum {string} */
            category?: "OPEN_RUN" | "NORMAL";
            /** Format: date-time */
            couponOpenAt?: string;
            /** Format: date-time */
            couponDeadlineAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        BaseResponseUserInfoResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["UserInfoResponseDto"];
        };
        UserInfoResponseDto: {
            /** Format: int64 */
            userId?: number;
            nickname?: string;
        };
        PagedResponseReviewPageWrapperDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["ReviewPageWrapperDto"];
            /** Format: int32 */
            count?: number;
        };
        ReviewPageWrapperDto: {
            /** Format: int64 */
            userId?: number;
            reviews?: components["schemas"]["ReviewViewResponseDto"][];
        };
        ReviewViewResponseDto: {
            /** Format: int64 */
            reviewId?: number;
            /** Format: int64 */
            lessonId?: number;
            lessonName?: string;
            /** Format: int64 */
            reviewerId?: number;
            reviewerNickname?: string;
            reviewImage?: string;
            content?: string;
            /** Format: double */
            rating?: number;
            /** Format: date-time */
            createdAt?: string;
        };
        BaseResponseListRankingResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["RankingResponseDto"][];
        };
        RankingResponseDto: {
            /** Format: int64 */
            userId?: number;
            userNickname?: string;
            /** Format: double */
            rating?: number;
            /** Format: int32 */
            reviewCount?: number;
            /** @enum {string} */
            category?: "GYM" | "PILATES" | "YOGA" | "RUNNING" | "CYCLING" | "HIKING" | "CLIMBING" | "SWIMMING" | "TENNIS" | "BADMINTON" | "SQUASH" | "FOOTBALL" | "BASKETBALL" | "BASEBALL" | "GOLF" | "DANCE" | "MARTIAL_ARTS" | "CROSS_FIT" | "BOARD_SPORTS" | "ESPORTS" | "TABLE_TENNIS" | "VOLLEYBALL" | "BOXING" | "KICKBOXING" | "FENCING" | "ARCHERY" | "INLINE_SKATING" | "SKATING" | "SURFING" | "HORSE_RIDING" | "SKIING" | "SNOWBOARDING" | "TRIATHLON" | "SPORTS_WATCHING_PARTY" | "ETC";
            /** Format: int32 */
            rank?: number;
            profileImage?: string;
        };
        BaseResponseProfileDetailResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["ProfileDetailResponseDto"];
        };
        ProfileDetailResponseDto: {
            /** Format: int64 */
            userId?: number;
            nickname?: string;
            profileImage?: string;
            intro?: string;
            /** Format: int32 */
            reviewCount?: number;
            /** Format: double */
            rating?: number;
        };
        PageRequestDto: {
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            limit?: number;
        };
        PagedResponseProfileCreatedLessonListWrapperDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["ProfileCreatedLessonListWrapperDto"];
            /** Format: int32 */
            count?: number;
        };
        ProfileCreatedLessonDto: {
            /** Format: int64 */
            id?: number;
            lessonName?: string;
            /** Format: int32 */
            maxParticipants?: number;
            /** Format: int32 */
            currentParticipants?: number;
            /** Format: int32 */
            price?: number;
            /** @enum {string} */
            status?: "RECRUITING" | "RECRUITMENT_COMPLETED" | "IN_PROGRESS" | "COMPLETED" | "CANCELLED";
            /** Format: date-time */
            startAt?: string;
            /** Format: date-time */
            endAt?: string;
            openRun?: boolean;
            addressDetail?: string;
        };
        ProfileCreatedLessonListWrapperDto: {
            lessons?: components["schemas"]["ProfileCreatedLessonDto"][];
        };
        PagedResponsePaymentSuccessPageWrapperDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["PaymentSuccessPageWrapperDto"];
            /** Format: int32 */
            count?: number;
        };
        PaymentSuccessHistoryResponseDto: {
            lessonTitle?: string;
            /** Format: date-time */
            paymentApprovedAt?: string;
            /** Format: date-time */
            lessonStartAt?: string;
            /** Format: date-time */
            lessonEndAt?: string;
            /** @enum {string} */
            paymentMethod?: "CREDIT_CARD" | "BANK_TRANSFER" | "TOSS_PAYMENT";
            city?: string;
            district?: string;
            dong?: string;
            /** Format: int32 */
            payPrice?: number;
            /** @enum {string} */
            paymentStatus?: "READY" | "IN_PROGRESS" | "WAITING_FOR_DEPOSIT" | "DONE" | "CANCELED" | "PARTIAL_CANCELED" | "ABORTED" | "EXPIRED";
            orderId?: string;
            detailAddress?: string;
        };
        PaymentSuccessPageWrapperDto: {
            successHistory?: components["schemas"]["PaymentSuccessHistoryResponseDto"][];
        };
        PagedResponsePaymentCancelPageWrapperDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["PaymentCancelPageWrapperDto"];
            /** Format: int32 */
            count?: number;
        };
        PaymentCancelHistoryResponseDto: {
            lessonTitle?: string;
            /** Format: date-time */
            paymentCancelledAt?: string;
            /** Format: date-time */
            lessonStartAt?: string;
            /** Format: date-time */
            lessonEndAt?: string;
            /** @enum {string} */
            paymentMethod?: "CREDIT_CARD" | "BANK_TRANSFER" | "TOSS_PAYMENT";
            city?: string;
            district?: string;
            dong?: string;
            /** Format: int32 */
            payPrice?: number;
            /** Format: int32 */
            refundPrice?: number;
            /** @enum {string} */
            paymentStatus?: "READY" | "IN_PROGRESS" | "WAITING_FOR_DEPOSIT" | "DONE" | "CANCELED" | "PARTIAL_CANCELED" | "ABORTED" | "EXPIRED";
            orderId?: string;
            detailAddress?: string;
            cancelReason?: string;
        };
        PaymentCancelPageWrapperDto: {
            failureHistory?: components["schemas"]["PaymentCancelHistoryResponseDto"][];
        };
        LessonSearchListWrapperDto: {
            lessons?: components["schemas"]["LessonSearchResponseDto"][];
        };
        LessonSearchResponseDto: {
            /** Format: int64 */
            id?: number;
            lessonName?: string;
            lessonLeaderName?: string;
            lessonLeaderImage?: string;
            /** Format: int32 */
            reviewCount?: number;
            /** Format: double */
            rating?: number;
            /** @enum {string} */
            category?: "GYM" | "PILATES" | "YOGA" | "RUNNING" | "CYCLING" | "HIKING" | "CLIMBING" | "SWIMMING" | "TENNIS" | "BADMINTON" | "SQUASH" | "FOOTBALL" | "BASKETBALL" | "BASEBALL" | "GOLF" | "DANCE" | "MARTIAL_ARTS" | "CROSS_FIT" | "BOARD_SPORTS" | "ESPORTS" | "TABLE_TENNIS" | "VOLLEYBALL" | "BOXING" | "KICKBOXING" | "FENCING" | "ARCHERY" | "INLINE_SKATING" | "SKATING" | "SURFING" | "HORSE_RIDING" | "SKIING" | "SNOWBOARDING" | "TRIATHLON" | "SPORTS_WATCHING_PARTY" | "ETC";
            /** Format: int32 */
            price?: number;
            /** Format: int32 */
            maxParticipants?: number;
            /** Format: int32 */
            currentParticipants?: number;
            /** @enum {string} */
            status?: "RECRUITING" | "RECRUITMENT_COMPLETED" | "IN_PROGRESS" | "COMPLETED" | "CANCELLED";
            /** Format: date-time */
            startAt?: string;
            /** Format: date-time */
            endAt?: string;
            /** Format: date-time */
            openTime?: string;
            openRun?: boolean;
            city?: string;
            district?: string;
            dong?: string;
            ri?: string;
            /** Format: date-time */
            createdAt?: string;
            lessonImages?: string[];
        };
        PagedResponseLessonSearchListWrapperDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["LessonSearchListWrapperDto"];
            /** Format: int32 */
            count?: number;
        };
        CreatedLessonDto: {
            /** Format: int64 */
            id?: number;
            lessonName?: string;
            /** Format: int32 */
            maxParticipants?: number;
            /** Format: int32 */
            currentParticipants?: number;
            /** Format: int32 */
            price?: number;
            /** @enum {string} */
            status?: "RECRUITING" | "RECRUITMENT_COMPLETED" | "IN_PROGRESS" | "COMPLETED" | "CANCELLED";
            /** Format: date-time */
            startAt?: string;
            /** Format: date-time */
            endAt?: string;
            openRun?: boolean;
            addressDetail?: string;
        };
        CreatedLessonListWrapperDto: {
            lessons?: components["schemas"]["CreatedLessonDto"][];
        };
        PagedResponseCreatedLessonListWrapperDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["CreatedLessonListWrapperDto"];
            /** Format: int32 */
            count?: number;
        };
        BaseResponseLessonDetailResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["LessonDetailResponseDto"];
        };
        LessonDetailResponseDto: {
            /** Format: int64 */
            id?: number;
            lessonName?: string;
            description?: string;
            /** Format: int64 */
            lessonLeader?: number;
            lessonLeaderName?: string;
            profileIntro?: string;
            profileImage?: string;
            /** Format: int32 */
            likeCount?: number;
            /** Format: int32 */
            reviewCount?: number;
            /** Format: double */
            rating?: number;
            /** @enum {string} */
            category?: "GYM" | "PILATES" | "YOGA" | "RUNNING" | "CYCLING" | "HIKING" | "CLIMBING" | "SWIMMING" | "TENNIS" | "BADMINTON" | "SQUASH" | "FOOTBALL" | "BASKETBALL" | "BASEBALL" | "GOLF" | "DANCE" | "MARTIAL_ARTS" | "CROSS_FIT" | "BOARD_SPORTS" | "ESPORTS" | "TABLE_TENNIS" | "VOLLEYBALL" | "BOXING" | "KICKBOXING" | "FENCING" | "ARCHERY" | "INLINE_SKATING" | "SKATING" | "SURFING" | "HORSE_RIDING" | "SKIING" | "SNOWBOARDING" | "TRIATHLON" | "SPORTS_WATCHING_PARTY" | "ETC";
            /** Format: int32 */
            price?: number;
            /** Format: int32 */
            maxParticipants?: number;
            /** Format: int32 */
            currentParticipants?: number;
            /** @enum {string} */
            status?: "RECRUITING" | "RECRUITMENT_COMPLETED" | "IN_PROGRESS" | "COMPLETED" | "CANCELLED";
            /** Format: date-time */
            startAt?: string;
            /** Format: date-time */
            endAt?: string;
            /** Format: date-time */
            openTime?: string;
            openRun?: boolean;
            city?: string;
            district?: string;
            dong?: string;
            ri?: string;
            addressDetail?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            lessonImages?: string[];
        };
        PagedResponseParticipantListWrapperDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["ParticipantListWrapperDto"];
            /** Format: int32 */
            count?: number;
        };
        ParticipantDto: {
            /** Format: int64 */
            lessonApplicationId?: number;
            user?: components["schemas"]["ProfileResponseDto"];
            /** Format: date-time */
            joinedAt?: string;
        };
        ParticipantListWrapperDto: {
            participants?: components["schemas"]["ParticipantDto"][];
        };
        ProfileResponseDto: {
            /** Format: int64 */
            userId?: number;
            nickname?: string;
            profileImage?: string;
            intro?: string;
        };
        LessonApplicationListWrapperDto: {
            lessonApplications?: components["schemas"]["LessonApplicationResponseDto"][];
        };
        PagedResponseLessonApplicationListWrapperDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["LessonApplicationListWrapperDto"];
            /** Format: int32 */
            count?: number;
        };
        BaseResponseLessonSimpleResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["LessonSimpleResponseDto"];
        };
        LessonSimpleResponseDto: {
            /** Format: int64 */
            lessonId?: number;
            lessonName?: string;
            /** Format: date-time */
            startAt?: string;
            /** Format: date-time */
            endAt?: string;
            /** Format: int64 */
            price?: number;
            addressDetail?: string;
        };
        LessonSummaryResponseDto: {
            /** Format: int64 */
            id?: number;
            lessonName?: string;
            /** Format: int64 */
            lessonLeader?: number;
            /** Format: date-time */
            startAt?: string;
            /** Format: int32 */
            price?: number;
            addressDetail?: string;
        };
        MyLessonApplicationListWrapperDto: {
            lessonApplications?: components["schemas"]["MyLessonApplicationResponseDto"][];
        };
        MyLessonApplicationResponseDto: {
            /** Format: int64 */
            lessonApplicationId?: number;
            lesson?: components["schemas"]["LessonSummaryResponseDto"];
            /** @enum {string} */
            status?: "PENDING" | "APPROVED" | "DENIED";
            /** Format: date-time */
            appliedAt?: string;
        };
        PagedResponseMyLessonApplicationListWrapperDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["MyLessonApplicationListWrapperDto"];
            /** Format: int32 */
            count?: number;
        };
        BaseResponseCouponPageResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["CouponPageResponseDto"];
        };
        CouponPageResponseDto: {
            coupons?: components["schemas"]["CouponResponseDto"][];
        };
        CouponResponseDto: {
            /** Format: int64 */
            couponId?: number;
            couponName?: string;
            discountPrice?: string;
            /** Format: int32 */
            minOrderPrice?: number;
            /** Format: date-time */
            expirationDate?: string;
            /** @enum {string} */
            ownedStatus?: "OWNED" | "NOT_OWNED";
            /** Format: int32 */
            quantity?: number;
            /** @enum {string} */
            category?: "OPEN_RUN" | "NORMAL";
            /** Format: date-time */
            openTime?: string;
        };
        BaseResponseUserCouponPageResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["UserCouponPageResponseDto"];
        };
        UserCouponPageResponseDto: {
            userCoupons?: components["schemas"]["UserCouponResponseDto"][];
        };
        UserCouponResponseDto: {
            /** Format: int64 */
            couponId?: number;
            couponName?: string;
            discountPrice?: string;
            /** Format: int32 */
            minOrderPrice?: number;
            /** Format: date-time */
            expirationDate?: string;
            /** @enum {string} */
            status?: "ACTIVE" | "INACTIVE";
            /** Format: date-time */
            useDate?: string;
        };
        PagedResponseListCommentResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["CommentResponseDto"][];
            /** Format: int32 */
            count?: number;
        };
        CouponListItemDto: {
            /** Format: int64 */
            couponId?: number;
            couponName?: string;
            /** Format: date-time */
            expirationDate?: string;
            discountPrice?: string;
            /** Format: int32 */
            minOrderPrice?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** @enum {string} */
            status?: "ACTIVE" | "INACTIVE";
            /** Format: int32 */
            quantity?: number;
            /** @enum {string} */
            category?: "OPEN_RUN" | "NORMAL";
            /** Format: date-time */
            couponOpenAt?: string;
            /** Format: date-time */
            couponDeadlineAt?: string;
        };
        CouponListWrapperDto: {
            coupons?: components["schemas"]["CouponListItemDto"][];
        };
        PagedResponseCouponListWrapperDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["CouponListWrapperDto"];
            /** Format: int32 */
            count?: number;
        };
        BaseResponseCouponDetailResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["CouponDetailResponseDto"];
        };
        CouponDetailResponseDto: {
            /** Format: int64 */
            id?: number;
            couponName?: string;
            /** Format: date-time */
            expirationDate?: string;
            discountPrice?: string;
            /** Format: int32 */
            minOrderPrice?: number;
            /** @enum {string} */
            status?: "ACTIVE" | "INACTIVE";
            /** Format: int32 */
            quantity?: number;
            /** @enum {string} */
            couponCategory?: "OPEN_RUN" | "NORMAL";
            /** Format: date-time */
            couponOpenAt?: string;
            /** Format: date-time */
            couponDeadlineAt?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: int32 */
            issuedCount?: number;
        };
        BaseResponseCouponDeleteResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["CouponDeleteResponseDto"];
        };
        CouponDeleteResponseDto: {
            /** Format: int64 */
            couponId?: number;
            couponName?: string;
            /** Format: date-time */
            deletedAt?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    sendVerificationCode: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailSendRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseEmailSendResponseDto"];
                };
            };
        };
    };
    confirmVerificationCode: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailVerificationDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseVoid"];
                };
            };
        };
    };
    checkNickname: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NicknameCheckRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseVoid"];
                };
            };
        };
    };
    signup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignupRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseSignupResponseDto"];
                };
            };
        };
    };
    logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseVoid"];
                };
            };
        };
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseLoginResponseDto"];
                };
            };
        };
    };
    upload: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    file: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    createReview: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                lessonId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReviewCreateRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseReviewCreateResponseDto"];
                };
            };
        };
    };
    verifyAmount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SaveAmountRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseVoid"];
                };
            };
        };
    };
    saveAmount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SaveAmountRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseVoid"];
                };
            };
        };
    };
    preparePayment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaymentRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponsePaymentResponseDto"];
                };
            };
        };
    };
    confirm: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConfirmPaymentRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseSuccessfulPaymentResponseDto"];
                };
            };
        };
    };
    cancel: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CancelPaymentRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseCancelPaymentResponseDto"];
                };
            };
        };
    };
    uploadCsv: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** Format: binary */
                    file: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    searchLessons: {
        parameters: {
            query: {
                pageRequestDto: components["schemas"]["PageRequestDto"];
                category?: "GYM" | "PILATES" | "YOGA" | "RUNNING" | "CYCLING" | "HIKING" | "CLIMBING" | "SWIMMING" | "TENNIS" | "BADMINTON" | "SQUASH" | "FOOTBALL" | "BASKETBALL" | "BASEBALL" | "GOLF" | "DANCE" | "MARTIAL_ARTS" | "CROSS_FIT" | "BOARD_SPORTS" | "ESPORTS" | "TABLE_TENNIS" | "VOLLEYBALL" | "BOXING" | "KICKBOXING" | "FENCING" | "ARCHERY" | "INLINE_SKATING" | "SKATING" | "SURFING" | "HORSE_RIDING" | "SKIING" | "SNOWBOARDING" | "TRIATHLON" | "SPORTS_WATCHING_PARTY" | "ETC";
                search?: string;
                city: string;
                district: string;
                dong: string;
                ri?: string;
                sortBy?: "LATEST" | "OLDEST" | "PRICE_HIGH" | "PRICE_LOW";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PagedResponseLessonSearchListWrapperDto"];
                };
            };
        };
    };
    createLesson: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LessonCreateRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseLessonResponseDto"];
                };
            };
        };
    };
    createLessonApplication: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                lessonId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseLessonApplicationResponseDto"];
                };
            };
        };
    };
    deleteLessonApplication: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                lessonId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseVoid"];
                };
            };
        };
    };
    processLessonApplication: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                lessonApplicationId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApplicationActionRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseApplicationProcessResponseDto"];
                };
            };
        };
    };
    createUserCoupon: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                couponId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseCreateUserCouponResponseDto"];
                };
            };
        };
    };
    readAll: {
        parameters: {
            query: {
                page: number;
                pageSize: number;
            };
            header?: never;
            path: {
                lessonId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PagedResponseListCommentResponseDto"];
                };
            };
        };
    };
    createComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                lessonId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CommentCreateRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseCommentResponseDto"];
                };
            };
        };
    };
    getCoupons: {
        parameters: {
            query: {
                pageRequestDto: components["schemas"]["PageRequestDto"];
                status?: "ACTIVE" | "INACTIVE";
                category?: "OPEN_RUN" | "NORMAL";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PagedResponseCouponListWrapperDto"];
                };
            };
        };
    };
    createCoupon: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CouponCreateRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseCouponCreateResponseDto"];
                };
            };
        };
    };
    updatePassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordUpdateDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseVoid"];
                };
            };
        };
    };
    updateProfileIntro: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IntroUpdateRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseIntroUpdateResponseDto"];
                };
            };
        };
    };
    updateProfileImage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ImageUpdateRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseImageUpdateResponseDto"];
                };
            };
        };
    };
    getLessonDetail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                lessonId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseLessonDetailResponseDto"];
                };
            };
        };
    };
    deleteLesson: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                lessonId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseVoid"];
                };
            };
        };
    };
    updateLesson: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                lessonId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LessonUpdateRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseLessonUpdateResponseDto"];
                };
            };
        };
    };
    getCouponDetail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                couponId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseCouponDetailResponseDto"];
                };
            };
        };
    };
    deleteCoupon: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                couponId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseCouponDeleteResponseDto"];
                };
            };
        };
    };
    updateCoupon: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                couponId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CouponUpdateRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseCouponUpdateResponseDto"];
                };
            };
        };
    };
    getCurrentUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseUserInfoResponseDto"];
                };
            };
        };
    };
    readAll_1: {
        parameters: {
            query: {
                page: number;
                pageSize: number;
            };
            header?: never;
            path: {
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PagedResponseReviewPageWrapperDto"];
                };
            };
        };
    };
    getRankings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseListRankingResponseDto"];
                };
            };
        };
    };
    getRankingsByCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                category: "GYM" | "PILATES" | "YOGA" | "RUNNING" | "CYCLING" | "HIKING" | "CLIMBING" | "SWIMMING" | "TENNIS" | "BADMINTON" | "SQUASH" | "FOOTBALL" | "BASKETBALL" | "BASEBALL" | "GOLF" | "DANCE" | "MARTIAL_ARTS" | "CROSS_FIT" | "BOARD_SPORTS" | "ESPORTS" | "TABLE_TENNIS" | "VOLLEYBALL" | "BOXING" | "KICKBOXING" | "FENCING" | "ARCHERY" | "INLINE_SKATING" | "SKATING" | "SURFING" | "HORSE_RIDING" | "SKIING" | "SNOWBOARDING" | "TRIATHLON" | "SPORTS_WATCHING_PARTY" | "ETC";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseListRankingResponseDto"];
                };
            };
        };
    };
    getProfileDetail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseProfileDetailResponseDto"];
                };
            };
        };
    };
    getUserCreatedLessons: {
        parameters: {
            query: {
                pageRequestDto: components["schemas"]["PageRequestDto"];
                status?: "RECRUITING" | "RECRUITMENT_COMPLETED" | "IN_PROGRESS" | "COMPLETED" | "CANCELLED";
            };
            header?: never;
            path: {
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PagedResponseProfileCreatedLessonListWrapperDto"];
                };
            };
        };
    };
    readAll_2: {
        parameters: {
            query: {
                page: number;
                pageSize: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PagedResponsePaymentSuccessPageWrapperDto"];
                };
            };
        };
    };
    readAllFailure: {
        parameters: {
            query: {
                page: number;
                pageSize: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PagedResponsePaymentCancelPageWrapperDto"];
                };
            };
        };
    };
    checkExists: {
        parameters: {
            query: {
                city: string;
                district: string;
                dong: string;
                ri?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": boolean;
                };
            };
        };
    };
    getCreatedLessons: {
        parameters: {
            query: {
                pageRequestDto: components["schemas"]["PageRequestDto"];
                status?: string;
            };
            header?: never;
            path: {
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PagedResponseCreatedLessonListWrapperDto"];
                };
            };
        };
    };
    getLessonParticipants: {
        parameters: {
            query: {
                pageRequestDto: components["schemas"]["PageRequestDto"];
            };
            header?: never;
            path: {
                lessonId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PagedResponseParticipantListWrapperDto"];
                };
            };
        };
    };
    getLessonApplications: {
        parameters: {
            query: {
                pageRequestDto: components["schemas"]["PageRequestDto"];
                status?: string;
            };
            header?: never;
            path: {
                lessonId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PagedResponseLessonApplicationListWrapperDto"];
                };
            };
        };
    };
    getLessonSimple: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                lessonId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseLessonSimpleResponseDto"];
                };
            };
        };
    };
    getMyLessonApplications: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
                status?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PagedResponseMyLessonApplicationListWrapperDto"];
                };
            };
        };
    };
    getCoupons_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseCouponPageResponseDto"];
                };
            };
        };
    };
    getUserCoupons: {
        parameters: {
            query?: {
                status?: "ACTIVE" | "INACTIVE";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseUserCouponPageResponseDto"];
                };
            };
        };
    };
    withdraw: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseVoid"];
                };
            };
        };
    };
    deleteComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                commentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseVoid"];
                };
            };
        };
    };
}
