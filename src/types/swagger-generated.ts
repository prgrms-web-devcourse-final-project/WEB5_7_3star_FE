/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/users/verify/email-send": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["sendVerificationCode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/verify/email-check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["confirmVerificationCode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/verify/check-nickname": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["checkNickname"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["signup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/test/s3/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * S3 파일 업로드
         * @description profile-images 폴더에 파일 업로드 후 URL 반환
         */
        post: operations["upload"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reviews/{lessonId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["createReview"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lessons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 레슨 검색 api
         * @description category(필수, Default: "ALL") / search(선택) / 그외 법정동 선택 필수
         */
        get: operations["searchLessons"];
        put?: never;
        /**
         * 레슨 생성 api
         * @description 레슨생성
         */
        post: operations["createLesson"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lessons/{lessonId}/application": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 레슨 신청
         * @description 레슨 ID에 해당되는 레슨을 신청합니다.
         */
        post: operations["createLessonApplication"];
        /**
         * 레슨 신청 취소
         * @description 레슨 ID에 해당되는 레슨 신청을 취소합니다.
         */
        delete: operations["deleteLessonApplication"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lessons/applications/{lessonApplicationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 레슨 신청 승인/거절 api */
        post: operations["processLessonApplication"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/coupons/{couponId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["createUserCoupon"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/comments/{lessonId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["readAll"];
        put?: never;
        post: operations["createComment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/profiles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["updateProfile"];
        trace?: never;
    };
    "/api/v1/reviews/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["readAll_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rankings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getRankings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/profiles/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getProfileDetail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lessons/{userId}/created-lessons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 강사가 개설한 레슨 목록 조회 api */
        get: operations["getCreatedLessons"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lessons/{lessonId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 레슨 상세조회
         * @description 레슨 ID로 상세 정보를 조회합니다.
         */
        get: operations["getLessonDetail"];
        put?: never;
        post?: never;
        /**
         * 레슨 삭제 api
         * @description 현재는 무료 레슨만 있기때문에 참가자가 있어도 마음대로 삭제가능
         */
        delete: operations["deleteLesson"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lessons/{lessonId}/participants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 레슨 참가자 목록 조회 api */
        get: operations["getLessonParticipants"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lessons/{lessonId}/applications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 레슨 신청자 목록 조회 api
         * @description 레슨 신청자의 목록을 조회 가능함.
         */
        get: operations["getLessonApplications"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lessons/summary/{lessonId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 레슨 간단 조회
         * @description 레슨 ID로 간단 정보를 조회합니다.
         */
        get: operations["getLessonSimple"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lessons/my-applications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 나의 레슨 신청 목록 조회
         * @description 현재 로그인한 사용자의 레슨 신청 목록을 조회합니다.
         */
        get: operations["getMyLessonApplications"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/coupons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getCoupons"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/coupons/my-coupons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getUserCoupons"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/comments/{commentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["deleteComment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        EmailSendRequestDto: {
            email: string;
        };
        BaseResponseEmailSendResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["EmailSendResponseDto"];
        };
        EmailSendResponseDto: {
            email?: string;
            /** Format: int32 */
            expirationMinutes?: number;
        };
        EmailVerificationDto: {
            email: string;
            verificationCode: string;
        };
        BaseResponseVoid: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: unknown;
        };
        NicknameCheckRequestDto: {
            nickname: string;
        };
        SignupRequestDto: {
            email: string;
            password: string;
            nickname: string;
        };
        BaseResponseSignupResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["SignupResponseDto"];
        };
        SignupResponseDto: {
            /** Format: int64 */
            id?: number;
            email?: string;
            nickname?: string;
            /** @enum {string} */
            userRole?: "USER" | "ADMIN";
            /** Format: date-time */
            createAt?: string;
        };
        LoginRequestDto: {
            email: string;
            password: string;
        };
        BaseResponseLoginResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["LoginResponseDto"];
        };
        LoginResponseDto: {
            /** Format: int64 */
            id?: number;
            email?: string;
            nickname?: string;
        };
        ReviewCreateRequestDto: {
            content?: string;
            /** Format: float */
            rating: number;
            reviewImage?: string;
        };
        BaseResponseReviewCreateResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["ReviewCreateResponseDto"];
        };
        ReviewCreateResponseDto: {
            /** Format: int64 */
            reviewId?: number;
            content?: string;
            /** Format: float */
            rating?: number;
            reviewImage?: string;
        };
        LessonCreateRequestDto: {
            lessonName: string;
            description: string;
            /** @enum {string} */
            category: "GYM" | "PILATES" | "YOGA" | "RUNNING" | "CYCLING" | "HIKING" | "CLIMBING" | "SWIMMING" | "TENNIS" | "BADMINTON" | "SQUASH" | "FOOTBALL" | "BASKETBALL" | "BASEBALL" | "GOLF" | "DANCE" | "MARTIAL_ARTS" | "CROSS_FIT" | "BOARD_SPORTS" | "ESPORTS" | "TABLE_TENNIS" | "VOLLEYBALL" | "BOXING" | "KICKBOXING" | "FENCING" | "ARCHERY" | "INLINE_SKATING" | "SKATING" | "SURFING" | "HORSE_RIDING" | "SKIING" | "SNOWBOARDING" | "TRIATHLON" | "SPORTS_WATCHING_PARTY" | "ETC";
            /** Format: int32 */
            price: number;
            /** Format: int32 */
            maxParticipants: number;
            /** Format: date-time */
            startAt: string;
            /** Format: date-time */
            endAt: string;
            /** Format: date-time */
            openTime?: string;
            openRun: boolean;
            city: string;
            district: string;
            dong: string;
            addressDetail: string;
            lessonImages?: string[];
        };
        BaseResponseLessonResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["LessonResponseDto"];
        };
        LessonResponseDto: {
            /** Format: int64 */
            id?: number;
            lessonName?: string;
            description?: string;
            /** Format: int64 */
            lessonLeader?: number;
            /** @enum {string} */
            category?: "GYM" | "PILATES" | "YOGA" | "RUNNING" | "CYCLING" | "HIKING" | "CLIMBING" | "SWIMMING" | "TENNIS" | "BADMINTON" | "SQUASH" | "FOOTBALL" | "BASKETBALL" | "BASEBALL" | "GOLF" | "DANCE" | "MARTIAL_ARTS" | "CROSS_FIT" | "BOARD_SPORTS" | "ESPORTS" | "TABLE_TENNIS" | "VOLLEYBALL" | "BOXING" | "KICKBOXING" | "FENCING" | "ARCHERY" | "INLINE_SKATING" | "SKATING" | "SURFING" | "HORSE_RIDING" | "SKIING" | "SNOWBOARDING" | "TRIATHLON" | "SPORTS_WATCHING_PARTY" | "ETC";
            /** Format: int32 */
            price?: number;
            /** Format: int32 */
            maxParticipants?: number;
            /** Format: date-time */
            startAt?: string;
            /** Format: date-time */
            endAt?: string;
            /** Format: date-time */
            openTime?: string;
            openRun?: boolean;
            city?: string;
            district?: string;
            dong?: string;
            addressDetail?: string;
            status?: string;
            /** Format: date-time */
            createdAt?: string;
            lessonImages?: string[];
        };
        BaseResponseLessonApplicationResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["LessonApplicationResponseDto"];
        };
        LessonApplicationResponseDto: {
            /** Format: int64 */
            lessonApplicationId?: number;
            /** Format: int64 */
            lessonId?: number;
            /** Format: int64 */
            userId?: number;
            status?: string;
            /** Format: date-time */
            appliedAt?: string;
        };
        ApplicationActionRequestDto: {
            /** @enum {string} */
            action: "APPROVED" | "DENIED";
        };
        ApplicationProcessResponseDto: {
            /** Format: int64 */
            lessonApplicationId?: number;
            /** Format: int64 */
            userId?: number;
            /** @enum {string} */
            status?: "PENDING" | "APPROVED" | "DENIED";
            /** Format: date-time */
            processedAt?: string;
        };
        BaseResponseApplicationProcessResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["ApplicationProcessResponseDto"];
        };
        BaseResponseCreateUserCouponResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["CreateUserCouponResponseDto"];
        };
        CreateUserCouponResponseDto: {
            /** Format: int64 */
            couponId?: number;
            /** Format: int64 */
            userId?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            expirationDate?: string;
            status?: string;
        };
        CommentCreateRequestDto: {
            content: string;
            /** Format: int64 */
            parentCommentId?: number;
        };
        BaseResponseCommentResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["CommentResponseDto"];
        };
        CommentResponseDto: {
            /** Format: int64 */
            commentId?: number;
            /** Format: int64 */
            userId?: number;
            content?: string;
            /** Format: int64 */
            parentCommentId?: number;
            deleted?: boolean;
            /** Format: date-time */
            createdAt?: string;
        };
        ProfileUpdateRequestDto: {
            profileImage?: string;
            intro?: string;
        };
        BaseResponseProfileResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["ProfileResponseDto"];
        };
        ProfileResponseDto: {
            /** Format: int64 */
            userId?: number;
            nickname?: string;
            profileImage?: string;
            intro?: string;
        };
        BaseResponseReviewPageResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["ReviewPageResponseDto"];
        };
        ReviewPageResponseDto: {
            /** Format: int64 */
            userId?: number;
            /** Format: int64 */
            count?: number;
            reviews?: components["schemas"]["ReviewViewResponseDto"][];
        };
        ReviewViewResponseDto: {
            /** Format: int64 */
            reviewId?: number;
            /** Format: int64 */
            lessonId?: number;
            lessonName?: string;
            /** Format: int64 */
            reviewerId?: number;
            reviewerNickname?: string;
            reviewImage?: string;
            content?: string;
            /** Format: float */
            rating?: number;
            /** Format: date-time */
            createdAt?: string;
        };
        BaseResponseListRankingResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["RankingResponseDto"][];
        };
        RankingResponseDto: {
            /** Format: int64 */
            userId?: number;
            userNickname?: string;
            /** Format: float */
            rating?: number;
            /** Format: int32 */
            reviewCount?: number;
            /** @enum {string} */
            category?: "GYM" | "PILATES" | "YOGA" | "RUNNING" | "CYCLING" | "HIKING" | "CLIMBING" | "SWIMMING" | "TENNIS" | "BADMINTON" | "SQUASH" | "FOOTBALL" | "BASKETBALL" | "BASEBALL" | "GOLF" | "DANCE" | "MARTIAL_ARTS" | "CROSS_FIT" | "BOARD_SPORTS" | "ESPORTS" | "TABLE_TENNIS" | "VOLLEYBALL" | "BOXING" | "KICKBOXING" | "FENCING" | "ARCHERY" | "INLINE_SKATING" | "SKATING" | "SURFING" | "HORSE_RIDING" | "SKIING" | "SNOWBOARDING" | "TRIATHLON" | "SPORTS_WATCHING_PARTY" | "ETC";
            /** Format: int32 */
            rank?: number;
            profileImage?: string;
        };
        BaseResponseProfileDetailResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["ProfileDetailResponseDto"];
        };
        ProfileDetailResponseDto: {
            /** Format: int64 */
            userId?: number;
            nickname?: string;
            profileImage?: string;
            intro?: string;
            /** Format: int32 */
            reviewCount?: number;
            /** Format: float */
            rating?: number;
        };
        BaseResponseLessonSearchListResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["LessonSearchListResponseDto"];
        };
        LessonSearchListResponseDto: {
            lessons?: components["schemas"]["LessonSearchResponseDto"][];
            /** Format: int32 */
            count?: number;
        };
        LessonSearchResponseDto: {
            /** Format: int64 */
            id?: number;
            lessonName?: string;
            lessonLeaderName?: string;
            lessonLeaderImage?: string;
            /** Format: int32 */
            reviewCount?: number;
            /** Format: float */
            rating?: number;
            /** @enum {string} */
            category?: "GYM" | "PILATES" | "YOGA" | "RUNNING" | "CYCLING" | "HIKING" | "CLIMBING" | "SWIMMING" | "TENNIS" | "BADMINTON" | "SQUASH" | "FOOTBALL" | "BASKETBALL" | "BASEBALL" | "GOLF" | "DANCE" | "MARTIAL_ARTS" | "CROSS_FIT" | "BOARD_SPORTS" | "ESPORTS" | "TABLE_TENNIS" | "VOLLEYBALL" | "BOXING" | "KICKBOXING" | "FENCING" | "ARCHERY" | "INLINE_SKATING" | "SKATING" | "SURFING" | "HORSE_RIDING" | "SKIING" | "SNOWBOARDING" | "TRIATHLON" | "SPORTS_WATCHING_PARTY" | "ETC";
            /** Format: int32 */
            price?: number;
            /** Format: int32 */
            maxParticipants?: number;
            /** Format: int32 */
            currentParticipants?: number;
            status?: string;
            /** Format: date-time */
            startAt?: string;
            /** Format: date-time */
            endAt?: string;
            /** Format: date-time */
            openTime?: string;
            openRun?: boolean;
            city?: string;
            district?: string;
            dong?: string;
            /** Format: date-time */
            createdAt?: string;
            lessonImages?: string[];
        };
        BaseResponseCreatedLessonListResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["CreatedLessonListResponseDto"];
        };
        CreatedLessonDto: {
            /** Format: int64 */
            id?: number;
            lessonName?: string;
            /** Format: int32 */
            maxParticipants?: number;
            /** Format: int32 */
            currentParticipants?: number;
            /** Format: int32 */
            price?: number;
            status?: string;
            /** Format: date-time */
            startAt?: string;
            /** Format: date-time */
            endAt?: string;
            openRun?: boolean;
            addressDetail?: string;
        };
        CreatedLessonListResponseDto: {
            lessons?: components["schemas"]["CreatedLessonDto"][];
            /** Format: int64 */
            count?: number;
        };
        BaseResponseLessonDetailResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["LessonDetailResponseDto"];
        };
        LessonDetailResponseDto: {
            /** Format: int64 */
            id?: number;
            lessonName?: string;
            description?: string;
            /** Format: int64 */
            lessonLeader?: number;
            lessonLeaderName?: string;
            profileIntro?: string;
            profileImage?: string;
            /** Format: int32 */
            likeCount?: number;
            /** Format: int32 */
            reviewCount?: number;
            /** Format: float */
            rating?: number;
            category?: string;
            /** Format: int32 */
            price?: number;
            /** Format: int32 */
            maxParticipants?: number;
            /** Format: int32 */
            currentParticipants?: number;
            status?: string;
            /** Format: date-time */
            startAt?: string;
            /** Format: date-time */
            endAt?: string;
            /** Format: date-time */
            openTime?: string;
            openRun?: boolean;
            city?: string;
            district?: string;
            dong?: string;
            addressDetail?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            lessonImages?: string[];
        };
        BaseResponseParticipantListResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["ParticipantListResponseDto"];
        };
        ParticipantDto: {
            /** Format: int64 */
            lessonApplicationId?: number;
            user?: components["schemas"]["ProfileResponseDto"];
            /** Format: date-time */
            joinedAt?: string;
        };
        ParticipantListResponseDto: {
            lessonApplications?: components["schemas"]["ParticipantDto"][];
            /** Format: int64 */
            count?: number;
        };
        BaseResponseLessonApplicationListResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["LessonApplicationListResponseDto"];
        };
        LessonApplicationListResponseDto: {
            lessonApplications?: components["schemas"]["LessonApplicationResponseDto"][];
            /** Format: int64 */
            count?: number;
        };
        BaseResponseLessonSimpleResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["LessonSimpleResponseDto"];
        };
        LessonSimpleResponseDto: {
            /** Format: int64 */
            lessonId?: number;
            lessonName?: string;
            /** Format: date-time */
            startAt?: string;
            /** Format: date-time */
            endAt?: string;
            /** Format: int64 */
            price?: number;
            addressDetail?: string;
        };
        BaseResponseMyLessonApplicationListResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["MyLessonApplicationListResponseDto"];
        };
        LessonSummaryResponseDto: {
            /** Format: int64 */
            id?: number;
            lessonName?: string;
            /** Format: int64 */
            lessonLeader?: number;
            /** Format: date-time */
            startAt?: string;
            /** Format: int32 */
            price?: number;
            addressDetail?: string;
        };
        MyLessonApplicationListResponseDto: {
            lessonApplications?: components["schemas"]["MyLessonApplicationResponseDto"][];
            /** Format: int32 */
            count?: number;
        };
        MyLessonApplicationResponseDto: {
            /** Format: int64 */
            lessonApplicationId?: number;
            lesson?: components["schemas"]["LessonSummaryResponseDto"];
            status?: string;
            /** Format: date-time */
            appliedAt?: string;
        };
        BaseResponseCouponPageResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["CouponPageResponseDto"];
        };
        CouponPageResponseDto: {
            coupons?: components["schemas"]["CouponResponseDto"][];
        };
        CouponResponseDto: {
            /** Format: int64 */
            couponId?: number;
            couponName?: string;
            discountPrice?: string;
            /** Format: int32 */
            minOrderPrice?: number;
            /** Format: date-time */
            expirationDate?: string;
            /** @enum {string} */
            ownedStatus?: "OWNED" | "NOT_OWNED";
            /** Format: int32 */
            quantity?: number;
            category?: string;
            /** Format: date-time */
            openTime?: string;
        };
        BaseResponseUserCouponPageResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["UserCouponPageResponseDto"];
        };
        UserCouponPageResponseDto: {
            userCoupons?: components["schemas"]["UserCouponResponseDto"][];
        };
        UserCouponResponseDto: {
            /** Format: int64 */
            couponId?: number;
            couponName?: string;
            discountPrice?: string;
            /** Format: int32 */
            minOrderPrice?: number;
            /** Format: date-time */
            expirationDate?: string;
            status?: string;
            /** Format: date-time */
            useDate?: string;
        };
        BaseResponseCommentPageResponseDto: {
            /** Format: int32 */
            status?: number;
            message?: string;
            data?: components["schemas"]["CommentPageResponseDto"];
        };
        CommentPageResponseDto: {
            comments?: components["schemas"]["CommentResponseDto"][];
            /** Format: int64 */
            count?: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    sendVerificationCode: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailSendRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseEmailSendResponseDto"];
                };
            };
        };
    };
    confirmVerificationCode: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailVerificationDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseVoid"];
                };
            };
        };
    };
    checkNickname: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NicknameCheckRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseVoid"];
                };
            };
        };
    };
    signup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignupRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseSignupResponseDto"];
                };
            };
        };
    };
    logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseVoid"];
                };
            };
        };
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseLoginResponseDto"];
                };
            };
        };
    };
    upload: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    file: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    createReview: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                lessonId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReviewCreateRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseReviewCreateResponseDto"];
                };
            };
        };
    };
    searchLessons: {
        parameters: {
            query: {
                page?: number;
                limit?: number;
                category: string;
                search?: string;
                city: string;
                district: string;
                dong: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseLessonSearchListResponseDto"];
                };
            };
        };
    };
    createLesson: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LessonCreateRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseLessonResponseDto"];
                };
            };
        };
    };
    createLessonApplication: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                lessonId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseLessonApplicationResponseDto"];
                };
            };
        };
    };
    deleteLessonApplication: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                lessonId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseVoid"];
                };
            };
        };
    };
    processLessonApplication: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                lessonApplicationId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApplicationActionRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseApplicationProcessResponseDto"];
                };
            };
        };
    };
    createUserCoupon: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                couponId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseCreateUserCouponResponseDto"];
                };
            };
        };
    };
    readAll: {
        parameters: {
            query: {
                page: number;
                pageSize: number;
            };
            header?: never;
            path: {
                lessonId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseCommentPageResponseDto"];
                };
            };
        };
    };
    createComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                lessonId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CommentCreateRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseCommentResponseDto"];
                };
            };
        };
    };
    updateProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProfileUpdateRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseProfileResponseDto"];
                };
            };
        };
    };
    readAll_1: {
        parameters: {
            query: {
                page: number;
                pageSize: number;
            };
            header?: never;
            path: {
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseReviewPageResponseDto"];
                };
            };
        };
    };
    getRankings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseListRankingResponseDto"];
                };
            };
        };
    };
    getProfileDetail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseProfileDetailResponseDto"];
                };
            };
        };
    };
    getCreatedLessons: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
                status?: string;
            };
            header?: never;
            path: {
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseCreatedLessonListResponseDto"];
                };
            };
        };
    };
    getLessonDetail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                lessonId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseLessonDetailResponseDto"];
                };
            };
        };
    };
    deleteLesson: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                lessonId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseVoid"];
                };
            };
        };
    };
    getLessonParticipants: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
            };
            header?: never;
            path: {
                lessonId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseParticipantListResponseDto"];
                };
            };
        };
    };
    getLessonApplications: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
                status?: string;
            };
            header?: never;
            path: {
                lessonId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseLessonApplicationListResponseDto"];
                };
            };
        };
    };
    getLessonSimple: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                lessonId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseLessonSimpleResponseDto"];
                };
            };
        };
    };
    getMyLessonApplications: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
                status?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseMyLessonApplicationListResponseDto"];
                };
            };
        };
    };
    getCoupons: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseCouponPageResponseDto"];
                };
            };
        };
    };
    getUserCoupons: {
        parameters: {
            query?: {
                status?: "ACTIVE" | "INACTIVE";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseUserCouponPageResponseDto"];
                };
            };
        };
    };
    deleteComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                commentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BaseResponseVoid"];
                };
            };
        };
    };
}
